/* Code generated by ChatGPT */
use std::env;
use std::fs;

const VERSION: &str = "1.0.0";

fn get_usage() -> String {
    let usage = r#"
        ***********************************************************
        *                                                         *
        *                                                          *
        *            Let's Get Rusty Exercises                      *
        *                                                          *
        *                                                         *
        ***********************************************************

        Usage: run_example [options] [arguments]

        Options:
        -h, --help        Show usage

        Arguments:
        run_example       Run Rust exercise

        Examples:
        run_example 1
        run_example -h
        run_example --help
        run_example --version

        Author: Luis Esteban Rodriguez <rodriguezjluis0@gmail.com>
        "#;
    usage.to_string()
}

fn get_current_level_dirs() -> Vec<String> {
    let mut dirs = vec![];
    if let Ok(entries) = fs::read_dir(".") {
        for entry in entries {
            if let Ok(entry) = entry {
                if entry.file_type().unwrap().is_dir() {
                    let name = entry.file_name().into_string().unwrap();
                    if name != "target" && name != ".git" && name != "src" {
                        dirs.push(name);
                    }
                }
            }
        }
    }
    dirs
}

fn generate_examples() -> std::collections::HashMap<String, String> {
    let dirs = get_current_level_dirs();
    let mut examples = std::collections::HashMap::new();
    for (k, v) in dirs.into_iter().enumerate() {
        examples.insert((k + 1).to_string(), v);
    }
    examples
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let choice = if args.len() > 1 { &args[1] } else { "0" };

    if choice == "-h" || choice == "--help" {
        println!("{}", get_usage());
        return;
    } else if choice == "--version" {
        println!("{}", VERSION);
        return;
    }

    let examples = generate_examples();
    if !examples.contains_key(choice) {
        println!("[!] Select a valid choice.");
        return;
    }

    println!("[+] Running example {}", examples[choice]);

    match std::process::Command::new("cargo")
        .arg("run")
        .arg("--manifest-path")
        .arg(format!("{}/Cargo.toml", examples[choice]))
        .status()
    {
        Ok(_) => {}
        Err(e) => println!("[!] Error: {}", e),
    }
}
