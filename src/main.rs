/* Code generated by ChatGPT */
use std::env;
use std::process::{Command, exit};

const VERSION: &str = "1.0.0";

const EXAMPLES: &[(&str, &str)] = &[
    ("1", "guessing_game"),
];

fn get_usage() -> String {
    format!(
        r#"
        ***********************************************************
        *                                                         *
        *                                                          *
        *            Let's Get Rusty Exercises                      *
        *                                                          *
        *                                                         *
        ***********************************************************

        Usage: run_example [options] [arguments]

        Options:
        -h, --help        Show usage
        
        Arguments:
        run_example       Run Rust exercise
        
        Examples:
        run_example 1
        run_example -h
        run_example --help
        run_example --version
        
        Author: Luis Esteban Rodriguez <rodriguezjluis0@gmail.com>
        "#
    )
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let choice = if args.len() > 1 { &args[1] } else { "" };

    if choice == "-h" || choice == "--help" {
        println!("{}", get_usage());
        exit(0);
    } else if choice == "--version" {
        println!("{}", VERSION);
        exit(0);
    }

    if EXAMPLES.iter().find(|&&(num, _)| num == choice).is_none() {
        eprintln!("[!] Select a valid choice.");
        exit(-1);
    }

    println!("[+] Running example {}", EXAMPLES.iter().find(|&&(num, _)| num == choice).unwrap().1);

    let path = format!("{}/{}/Cargo.toml", env::current_dir().unwrap().to_str().unwrap(), EXAMPLES.iter().find(|&&(num, _)| num == choice).unwrap().1);
    let output = Command::new("cargo")
                     .arg("run")
                     .arg("--manifest-path")
                     .arg(path)
                     .status();

    match output {
        Ok(status) => {
            if status.success() {
                exit(0);
            } else {
                eprintln!("[!] Failed to run example.");
                exit(-1);
            }
        },
        Err(_) => {
            eprintln!("[!] Failed to run example.");
            exit(-1);
        }
    }
}
